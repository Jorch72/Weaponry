package com.ldtteam.armory.weaponry.common.event;

import com.ldtteam.armory.weaponry.Weaponry;
import com.smithsmodding.armory.api.IArmoryAPI;
import com.smithsmodding.armory.api.common.helpers.IMaterialConstructionHelper;
import com.smithsmodding.armory.api.common.material.armor.ICoreArmorMaterial;
import com.smithsmodding.smithscore.util.common.helper.ItemStackHelper;
import net.minecraftforge.event.RegistryEvent;
import net.minecraftforge.fluids.Fluid;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.oredict.OreDictionary;
import slimeknights.tconstruct.library.TinkerRegistry;
import slimeknights.tconstruct.library.materials.Material;
import slimeknights.tconstruct.library.smeltery.CastingRecipe;
import slimeknights.tconstruct.library.smeltery.ICastingRecipe;

import java.util.List;
import java.util.function.Consumer;
import java.util.function.Predicate;

/**
 * Created by Orion
 * Created on 01.06.2015
 * 11:07
 * <p/>
 * Copyrighted according to Project specific license
 */
public class ArmoryCompatEventHandler
{

    @SubscribeEvent
    public void RegisterCoreMaterialsHandler(final RegistryEvent.Register<ICoreArmorMaterial> event)
    {
        IMaterialConstructionHelper helper = IArmoryAPI.Holder.getInstance().getHelpers().getMaterialConstructionHelper();

        checkTinkersConstructMetals(
          metalName -> event.getRegistry().getValuesCollection().stream().anyMatch(material -> material.getOreDictionaryIdentifier().equalsIgnoreCase(metalName)),
          metalName -> {
              final Material tconMaterial = getMaterialForFluid()
              final ICoreArmorMaterial material = helper.createMedievalCoreArmorMaterial(
                tconMaterial.getLocalizedName(),
                tconMaterial.getTextColor(),
                metalName,
              )
          }
        );
    }

    private static Material getMaterialForFluid(final Fluid fluid) {
        return TinkerRegistry.getAllMaterials().stream()
                 .filter(mat -> fluid.equals(mat.getFluid()))
                 .findFirst()
                 .orElse(Material.UNKNOWN);
    }

    private void checkTinkersConstructMetals(final Predicate<String> oreNameCheck, final Consumer<String> metalNameRegistrar) {
        Weaponry.logger.info("Started checking TiC Registry.");
        int tRecipesFound = 0;
        final List<ICastingRecipe> allTableCastingRecipes = TinkerRegistry.getAllTableCastingRecipes();

        for(final ICastingRecipe recipeCandidate : allTableCastingRecipes)
        {
            if (recipeCandidate instanceof CastingRecipe)
            {
                final CastingRecipe recipe = (CastingRecipe) recipeCandidate;
                if (checkIfRegisterIsNeededForRecipe(recipe, oreNameCheck, metalNameRegistrar))
                    tRecipesFound ++;
            }


        }

        Weaponry.logger.info("Finished searching TiC Registry. Found: " + tRecipesFound + " suitable candidates.");
    }

    private boolean checkIfRegisterIsNeededForRecipe(final CastingRecipe recipe, final Predicate<String> oreNameCheck, final Consumer<String> metalNameRegistrar)
    {
        final int[] recipeOutputOreIds = OreDictionary.getOreIDs(recipe.getResult());

        //Verify if metal was not already registered.
        for (final int oreID : recipeOutputOreIds)
        {
            final String oreName = OreDictionary.getOreName(oreID);

            if (oreName.contains("ingot"))
            {
                final String metalName = oreName.replace("ingot", "");

                if (!oreNameCheck.test(metalName))
                    return false;
            }
        }


        for (final int oreId : recipeOutputOreIds)
        {
            final String oreName = OreDictionary.getOreName(oreId).toLowerCase();
            if (oreName.contains("ingot"))
            {
                final String metalName = oreName.replace("ingot", "");

                Weaponry.logger.info("Found metal ingot in TiC LiquidCasting: " + oreName + " - For Itemstack: " + ItemStackHelper.toString(recipe.getResult()) + " - Inserting it into Armory if possible!");
                metalNameRegistrar.accept(metalName);

                //ArmorMaterial tAutoMatedMaterial = new ArmorMaterial(References.InternalNames.Materials.AUTOGENERATED + OreDictionary.getOreName(tOreID).replace("ingot", ""), OreDictionary.getOreName(tOreID).replace("ingot", ""), OreDictionary.getOreName(tOreID).replace("ingot", ""), true, FluidType.getFluidType(tRecipe.castingMetal.getFluid()).baseTemperature * 1.4F * 3.2F, (FluidType.getFluidType(tRecipe.castingMetal.getFluid()).baseTemperature * 1.4F * 3.2F)/ 8288F, tRecipe.output);
                //

                return true;
            }
        }

        return false;
    }
}
